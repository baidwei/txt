git学习文档：

git是什么？
Git是目前世界上 最先进的 分布式版本控制系统(没有之一)

git的诞生
Linus在1991年创建了开源的Linux
2005年BitMover公司BitKeeper版本控制软件，收回对Linux社区的免费使用权
Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git

集中式vs分布式
集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器
分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。

安装GIT

1.在LINUX上安装git：
$git
$sudo apt-get install git   (Debian或Ubuntu Linux) ,老版本的Debian或Ubuntu Linux命令：sudo apt-get install git-core
---如果是其他LINUX系统，可以通过源码安装。先从GIT官网下载源码，然后解压，依次执行: ./configure , make ,sudo make install 就可以完成安装

2.在Windows上安装git:
msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可

3.完成安装后配置
git config --global user.name  "Your Name"
git config --global user.email "email@email.com"

创建版本库
1.什么是版本库?
版本库又名仓库，英文名repository

创建一个版本库非常简单
1.创建目录
mkdir learngit
cd learngit
2.将此目录变成GIT可管理的仓库
git init 

总结创建版本库:
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    第二步，使用命令git commit，完成。

时光机穿梭
1.随时查看工作区状态
git status
2.查看修改内容的不同之处[比较还没有add的文件与已经add过的文件的区别]
git diff  <filename>    
3.添加文件并提交
git add  <filename>
git commit -m "提交版本描述"

备注：
通过git --help command可以查看命令使用方法
例如:git --help commit

版本回退
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 git log --pretty=oneline
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

工作区和暂缓区
工作区（Working Directory）：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
文件往Git版本库里添加，分两步执行：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

管理修改
修改步骤是：第一次修改 -> git add -> 第二次修改 -> git commit
此时提交的是第一次修改的，因为第一次修改被放到了暂存区，第二次修改没有放到暂存区，所以此处提交只提交了第一次修改
修改步骤是：第一次修改 -> git add -> 第二次修改 -> git add -> git commit
此时能将2次的修改都提交了。
总结：Git是如何跟踪修改的：每次修改，如果不add到暂存区，那就不会加入到commit中。

撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容

远程仓库
首先，注册GitHub账号： http://github.com
第1步：创建SSH Key
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key:
ssh-keygen -t rsa -C "youremail@example.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去
“有了远程仓库，妈妈再也不用担心我的硬盘了。”——Git点读机

添加远程库
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库
目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
git remote add origin git@github.com:michaelliao/learngit.git     --michaelliao这个GitHub账号名替换为个人的账号
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
下一步，就可以把本地库的所有内容推送到远程库上
git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样
从现在起，只要本地作了提交，就可以通过命令：git push origin master
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库

通过HTTPS方式添加远程库方式：
首先 git remote rm origin //git 远程的 orgin 删除掉 
第二：git remote add origin https://github.com/GStepOne/learnp.git 
然后：git push -u origin master

SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告:
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

it会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了:
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。
如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致

远程仓库总结：
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

从远程库克隆
首先，登陆GitHub，创建一个新的仓库，名字叫gitskills
我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
git clone https://github.com/baidwei/gitskills.git

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

分支管理
分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。
如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN
分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。
但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件

创建与合并分支
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

解决冲突
1.创建和切换到新分支
git checkout -b feature1
2.切换分支
git checkout master
3.合并分支
git merge feature1
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
4.用带参数的git log也可以看到分支的合并情况：
git log --graph --pretty=oneline --abbrev-commit
5.删除分支
git branch -d feature1

解决冲突的总结：
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图

