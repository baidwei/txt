git学习文档：

git是什么？
Git是目前世界上 最先进的 分布式版本控制系统(没有之一)

git的诞生
Linus在1991年创建了开源的Linux
2005年BitMover公司BitKeeper版本控制软件，收回对Linux社区的免费使用权
Linus花了两周时间自己用C写了一个分布式版本控制系统，这就是Git

集中式vs分布式
集中式版本控制系统，版本库是集中存放在中央服务器的，而干活的时候，用的都是自己的电脑，所以要先从中央服务器取得最新的版本，然后开始干活，干完活了，再把自己的活推送给中央服务器
分布式版本控制系统根本没有“中央服务器”，每个人的电脑上都是一个完整的版本库，这样，你工作的时候，就不需要联网了，因为版本库就在你自己的电脑上。

安装GIT

1.在LINUX上安装git：
$git
$sudo apt-get install git   (Debian或Ubuntu Linux) ,老版本的Debian或Ubuntu Linux命令：sudo apt-get install git-core
---如果是其他LINUX系统，可以通过源码安装。先从GIT官网下载源码，然后解压，依次执行: ./configure , make ,sudo make install 就可以完成安装

2.在Windows上安装git:
msysgit是Windows版的Git，从http://msysgit.github.io/下载，然后按默认选项安装即可

3.完成安装后配置
git config --global user.name  "Your Name"
git config --global user.email "email@email.com"

创建版本库
1.什么是版本库?
版本库又名仓库，英文名repository

创建一个版本库非常简单
1.创建目录
mkdir learngit
cd learngit
2.将此目录变成GIT可管理的仓库
git init 

总结创建版本库:
初始化一个Git仓库，使用git init命令。
添加文件到Git仓库，分两步：
    第一步，使用命令git add <file>，注意，可反复多次使用，添加多个文件；
    第二步，使用命令git commit，完成。

时光机穿梭
1.随时查看工作区状态
git status
2.查看修改内容的不同之处[比较还没有add的文件与已经add过的文件的区别]
git diff  <filename>    
3.添加文件并提交
git add  <filename>
git commit -m "提交版本描述"

备注：
通过git --help command可以查看命令使用方法
例如:git --help commit

版本回退
HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。
穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。 git log --pretty=oneline
要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

工作区和暂缓区
工作区（Working Directory）：就是你在电脑里能看到的目录，比如我的learngit文件夹就是一个工作区。
版本库（Repository）：工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库
Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。
文件往Git版本库里添加，分两步执行：
第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；
第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支

管理修改
修改步骤是：第一次修改 -> git add -> 第二次修改 -> git commit
此时提交的是第一次修改的，因为第一次修改被放到了暂存区，第二次修改没有放到暂存区，所以此处提交只提交了第一次修改
修改步骤是：第一次修改 -> git add -> 第二次修改 -> git add -> git commit
此时能将2次的修改都提交了。
总结：Git是如何跟踪修改的：每次修改，如果不add到暂存区，那就不会加入到commit中。

撤销修改
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。

删除文件
命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容

远程仓库
首先，注册GitHub账号： http://github.com
第1步：创建SSH Key
在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果已经有了，可直接跳到下一步。如果没有，打开Shell（Windows下打开Git Bash），创建SSH Key:
ssh-keygen -t rsa -C "youremail@example.com"
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面 然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容

最后友情提示，在GitHub上免费托管的Git仓库，任何人都可以看到喔（但只有你自己才能改）。所以，不要把敏感信息放进去
“有了远程仓库，妈妈再也不用担心我的硬盘了。”——Git点读机

添加远程库
首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库
在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库
目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。
现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：
git remote add origin git@github.com:michaelliao/learngit.git     --michaelliao这个GitHub账号名替换为个人的账号
添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库
下一步，就可以把本地库的所有内容推送到远程库上
git push -u origin master
把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程
由于远程库是空的，我们第一次推送master分支时，加上了-u参数，
Git不但会把本地的master分支内容推送的远程新的master分支，
还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。
推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样
从现在起，只要本地作了提交，就可以通过命令：git push origin master
把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库

通过HTTPS方式添加远程库方式：
首先 git remote rm origin //git 远程的 orgin 删除掉 
第二：git remote add origin https://github.com/GStepOne/learnp.git 
然后：git push -u origin master

SSH警告
当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告:
The authenticity of host 'github.com (xx.xx.xx.xx)' can't be established.
RSA key fingerprint is xx.xx.xx.xx.xx.
Are you sure you want to continue connecting (yes/no)?
这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。

it会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了:
Warning: Permanently added 'github.com' (RSA) to the list of known hosts.
这个警告只会出现一次，后面的操作就不会有任何警告了。
如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致

远程仓库总结：
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步，真是太方便了！

从远程库克隆
首先，登陆GitHub，创建一个新的仓库，名字叫gitskills
我们勾选Initialize this repository with a README，这样GitHub会自动为我们创建一个README.md文件。创建完毕后，可以看到README.md文件
现在，远程库已经准备好了，下一步是用命令git clone克隆一个本地库：
git clone https://github.com/baidwei/gitskills.git

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。

分支管理
分支就是科幻电影里面的平行宇宙，当你正在电脑前努力学习Git的时候，另一个你正在另一个平行宇宙里努力学习SVN。
如果两个平行宇宙互不干扰，那对现在的你也没啥影响。不过，在某个时间点，两个平行宇宙合并了，结果，你既学会了Git又学会了SVN
分支在实际中有什么用呢？假设你准备开发一个新功能，但是需要两周才能完成，第一周你写了50%的代码，如果立刻提交，由于代码还没写完，不完整的代码库会导致别人不能干活了。如果等代码全部写完再一次提交，又存在丢失每天进度的巨大风险。
现在有了分支，就不用怕了。你创建了一个属于你自己的分支，别人看不到，还继续在原来的分支上正常工作，而你在自己的分支上干活，想提交就提交，直到开发完毕后，再一次性合并到原来的分支上，这样，既安全，又不影响别人工作。
其他版本控制系统如SVN等都有分支管理，但是用过之后你会发现，这些版本控制系统创建和切换分支比蜗牛还慢，简直让人无法忍受，结果分支功能成了摆设，大家都不去用。
但Git的分支是与众不同的，无论创建、切换和删除分支，Git在1秒钟之内就能完成！无论你的版本库是1个文件还是1万个文件

创建与合并分支
在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支

Git鼓励大量使用分支：
查看分支：git branch
创建分支：git branch <name>
切换分支：git checkout <name>
创建+切换分支：git checkout -b <name>
合并某分支到当前分支：git merge <name>
删除分支：git branch -d <name>

解决冲突
1.创建和切换到新分支
git checkout -b feature1
2.切换分支
git checkout master
3.合并分支
git merge feature1
Git用<<<<<<<，=======，>>>>>>>标记出不同分支的内容
4.用带参数的git log也可以看到分支的合并情况： 
git log --graph --pretty=oneline --abbrev-commit
5.删除分支
git branch -d feature1

解决冲突的总结：
当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。
用git log --graph命令可以看到分支合并图

分支管理策略
通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。
如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。
1.创建并切换dev分支
git checkout -b dev
2.修改并提交一个新的文件
git add readme.txt 
git commit -m "add merge"
3.切换到master分支
git checkout master
4.合并dev分支[使用--no-ff方式的git merge]   其中-m参数，将commit描述写进去去。
git merge --no-ff -m "merge with no-ff" dev       ---使用--no-ff参数后，会执行正常合并，在Master分支上生成一个新节点
默认没有--no-ff参数情况下，Git执行"快进式合并"（fast-farward merge），会直接将Master分支指向Develop分支
5.合并后，用git log查看分支历史
git log --graph --pretty=oneline --abbrev-commit

分支策略
在实际开发中，我们应该按照几个基本原则进行分支管理：
首先，master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；
那在哪干活呢？干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候，比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；
你和你的小伙伴们每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。

Git分支十分强大，在团队开发中应该充分应用。
合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

BUG分支
软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，
所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。

通过git stash 命令，保存当前工作现场
通过git stash list 命令，查看stash队列
通过list查看后，使用git stash pop stash@{num}。num 就是你要恢复的工作现场的编号
通过git stash clear命令，清空stash队列

1.查看当前状态
F:\git_repository\txt>git status
On branch dev
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_study.txt

no changes added to commit (use "git add" and/or "git commit -a")
F:\git_repository\txt>

2.记录当前现场
F:\git_repository\txt>git stash
Saved working directory and index state WIP on dev: 6096210 add bug content
HEAD is now at 6096210 add bug content

F:\git_repository\txt>

3.此时查看当前状态，即为Clean状态
F:\git_repository\txt>git status
On branch dev
nothing to commit, working directory clean

F:\git_repository\txt>
4.确定在哪个分支上出现BUG，然后创建分支修复BUG
比如master分支上出现BUG需要修复。首先切换到master分支，然后从master分支，创建分支修复BUG
F:\git_repository\txt>git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

F:\git_repository\txt>git checkout -b issue-101
Switched to a new branch 'issue-101'

F:\git_repository\txt>
5.修复文件，然后添加并提交
F:\git_repository\txt>git add git_study.txt

F:\git_repository\txt>git commit -m "fix bug 101"
[issue-101 cae6efe] fix bug 101
 1 file changed, 1 insertion(+)

F:\git_repository\txt>
5.提交完成后，切换回master分支，做合并，最后删除issue-101分支
F:\git_repository\txt>git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

F:\git_repository\txt>git merge --no-ff -m "merged bug fix 101" issue-101
Merge made by the 'recursive' strategy.
 git_study.txt | 1 +
 1 file changed, 1 insertion(+)

F:\git_repository\txt>git branch -d issue-101
Deleted branch issue-101 (was cae6efe).

F:\git_repository\txt>
6.完成bug修复，后续可以切换到原来的dev现场继续干活
F:\git_repository\txt>git checkout dev
Switched to branch 'dev'

F:\git_repository\txt>git status
On branch dev
nothing to commit, working directory clean

F:\git_repository\txt>
7.工作区干净的，然后通过git stash list查看之前保存的工作现场
F:\git_repository\txt>git stash list
WARNING: terminal is not fully functional
stash@{0}: WIP on dev: 6096210 add bug content

F:\git_repository\txt>
8.恢复工作现场
一般用git stash apply恢复现场，此恢复操作，stash内容并不删除，若需要删除，通过git stash drop删除；
另一种方式是用git stash pop,恢复现场的同时将stash内容也删除了
注意：也可以做多次stash，恢复的时候，先用git stash list查看，然后恢复指定stash,用命令:git stash apply stash@{0} 
F:\git_repository\txt>git stash apply
On branch dev
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   git_study.txt

no changes added to commit (use "git add" and/or "git commit -a")

F:\git_repository\txt>git stash list
WARNING: terminal is not fully functional
stash@{0}: WIP on dev: 6096210 add bug content

F:\git_repository\txt>
F:\git_repository\txt>git stash drop
Dropped refs/stash@{0} (d9baa3e5a6339965588ce7f92afb4e2d454289d8)

F:\git_repository\txt>git stash list

F:\git_repository\txt>

总结：
修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场。

Feature分支
软件开发中，总有无穷无尽的新的功能要不断添加进来。
添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱了，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后，删除该feature分支。
1.创建并切换feature分支（首先切换到dev分支，然后做如下操作）
参考命令：git checkout -b feature-v101
F:\git_repository\txt>git checkout -b feature-v101
Switched to a new branch 'feature-v101'

F:\git_repository\txt>
2.新增feature分支功能文件，并添加和提交
F:\git_repository\txt>git add feature101.txt

F:\git_repository\txt>git status
On branch feature-v101
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        new file:   feature101.txt


F:\git_repository\txt>git commit -m "add feature feature101.txt"
[feature-v101 1f63bd8] add feature feature101.txt
 1 file changed, 4 insertions(+)
 create mode 100644 feature101.txt

F:\git_repository\txt>
3.切换回dev分支，并合并
git checkout dev
F:\git_repository\txt>git checkout dev
Switched to branch 'dev'

F:\git_repository\txt>
4.feature分支和bug分支是类似的，合并，然后删除
5.但是，就在此时，接到上级命令，因经费不足，新功能必须取消！虽然白干了，但是这个分支还是必须就地销毁
F:\git_repository\txt>git branch -d feature-v101
error: The branch 'feature-v101' is not fully merged.
If you are sure you want to delete it, run 'git branch -D feature-v101'.

F:\git_repository\txt>
销毁失败。Git友情提醒，feature-v101分支还没有被合并，如果删除，将丢失掉修改，
如果要强行删除，需要使用命令git branch -D feature-v101。
现在我们强行删除： git branch -D feature-v101
F:\git_repository\txt>git branch -D feature-v101
Deleted branch feature-v101 (was 1f63bd8).

F:\git_repository\txt>

总结
开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

多人协作
当你从远程仓库克隆时，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且，远程仓库的默认名称是origin
要查看远程库的信息，用git remote：
F:\git_repository\txt>git remote
origin

F:\git_repository\txt>
用git remote -v显示更详细的信息：
F:\git_repository\txt>git remote -v
origin  https://github.com/baidwei/txt.git (fetch)
origin  https://github.com/baidwei/txt.git (push)

F:\git_repository\txt>
上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址

推送分支
推送分支，就是把该分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上
git push origin master
如果要推送其他分支，比如dev，就改成:
git push origin dev
但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢？
    master分支是主分支，因此要时刻与远程同步；
    dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；
    bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；
    feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。
抓取分支
多人协作时，大家都会往master和dev分支上推送各自的修改
现在，模拟一个你的小伙伴，可以在另一台电脑（注意要把SSH Key添加到GitHub）或者同一台电脑的另一个目录下克隆
git clone git@github.com:michaelliao/learngit.git
当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地的master分支。不信可以用git branch命令看看：
$git branch
* master
现在，你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支：
$ git checkout -b dev origin/dev
现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程：
$ git commit -m "add /usr/bin/env"
[dev 291bea8] add /usr/bin/env
 1 file changed, 1 insertion(+)
$ git push origin dev
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 349 bytes, done.
Total 3 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
   fc38031..291bea8  dev -> dev

你的小伙伴已经向origin/dev分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：

$ git add hello.py 
$ git commit -m "add coding: utf-8"
[dev bd6ae48] add coding: utf-8
 1 file changed, 1 insertion(+)
$ git push origin dev
To git@github.com:michaelliao/learngit.git
 ! [rejected]        dev -> dev (non-fast-forward)
error: failed to push some refs to 'git@github.com:michaelliao/learngit.git'
hint: Updates were rejected because the tip of your current branch is behind
hint: its remote counterpart. Merge the remote changes (e.g. 'git pull')
hint: before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.

推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送：

$ git pull
remote: Counting objects: 5, done.
remote: Compressing objects: 100% (2/2), done.
remote: Total 3 (delta 0), reused 3 (delta 0)
Unpacking objects: 100% (3/3), done.
From github.com:michaelliao/learngit
   fc38031..291bea8  dev        -> origin/dev
There is no tracking information for the current branch.
Please specify which branch you want to merge with.
See git-pull(1) for details

    git pull <remote> <branch>

If you wish to set tracking information for this branch you can do so with:

    git branch --set-upstream dev origin/<branch>

git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接：

$ git branch --set-upstream dev origin/dev
Branch dev set up to track remote branch dev from origin.

再pull：

$ git pull
Auto-merging hello.py
CONFLICT (content): Merge conflict in hello.py
Automatic merge failed; fix conflicts and then commit the result.

这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push：

$ git commit -m "merge & fix hello.py"
[dev adca45d] merge & fix hello.py
$ git push origin dev
Counting objects: 10, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (5/5), done.
Writing objects: 100% (6/6), 747 bytes, done.
Total 6 (delta 0), reused 0 (delta 0)
To git@github.com:michaelliao/learngit.git
   291bea8..adca45d  dev -> dev
因此，多人协作的工作模式通常是这样：
    首先，可以试图用git push origin branch-name推送自己的修改；
    如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；
    如果合并有冲突，则解决冲突，并在本地提交；
    没有冲突或者解决掉冲突后，再用git push origin branch-name推送就能成功！
如果git pull提示“no tracking information”，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream branch-name origin/branch-name。
这就是多人协作的工作模式，一旦熟悉了，就非常简单。

小结
查看远程库信息，使用git remote -v；
本地新建的分支如果不推送到远程，对其他人就是不可见的；
从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；
在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；
建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；
从远程抓取分支，使用git pull，如果有冲突，要先处理冲突

标签管理
发布一个版本时，我们通常先在版本库中打一个标签，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就是把那个打标签的时刻的历史版本取出来。所以，标签也是版本库的一个快照。
Git的标签虽然是版本库的快照，但其实它就是指向某个commit的指针（跟分支很像对不对？但是分支可以移动，标签不能移动），所以，创建和删除标签都是瞬间完成的。
创建标签
在Git中打标签非常简单，首先，切换到需要打标签的分支上：
F:\git_repository\txt>git branch
* dev
  master

F:\git_repository\txt>git checkout master
Switched to branch 'master'
Your branch is up-to-date with 'origin/master'.

F:\git_repository\txt>
然后，敲命令git tag <name>就可以打一个新标签：
F:\git_repository\txt>git tag v1.0

可以用命令git tag查看所有标签：
F:\git_repository\txt>git tag
v1.0

F:\git_repository\txt>
默认标签是打在最新提交的commit上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办？
方法是找到历史提交的commit id，然后打上就可以了：
git log --pretty=oneline --abbrev-commit  其中--pretty=oneline是单行显示，其中--abbrev-commit：仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。

F:\git_repository\txt>git log --pretty=oneline --abbrev-commit
WARNING: terminal is not fully functional
6d37209 modified git_study.txt
f76bc98 add bug branch content
8d4589b merged bug fix 101
cae6efe fix bug 101
2bb3412 add bug
6096210 add bug content
d7d4335 add bug content
7976403 add git log --graph
84f14ba add git status
012b64e add to learn git status
6b5cc62 add git_study.txt
82c8886 add dev branch
3b4c4c9 ada first file.
888eab9 Initial commit

F:\git_repository\txt>
比方说要对fix bug 101这次提交打标签，它对应的commit id是cae6efe，
敲入命令：git tag v0.9 cae6efe
F:\git_repository\txt>git tag v0.9 cae6efe
查看TAG标签
F:\git_repository\txt>git tag
v0.9
v1.0

F:\git_repository\txt>
注意，标签不是按时间顺序列出，而是按字母排序的。可以用git show <tagname>查看标签信息：
F:\git_repository\txt>git show v0.9
WARNING: terminal is not fully functional
commit cae6efe22ae32140ced3e617b16dacf06c28268f
Author: baidwei <baidwei@sohu.com>
Date:   Wed Sep 30 09:40:46 2015 +0800

    fix bug 101

diff --git a/git_study.txt b/git_study.txt
index 6e76c8f..493c538 100644
--- a/git_study.txt
+++ b/git_study.txt
@@ -209,3 +209,4 @@ Git分支十分强大，在团队开发中应该充分应用
 通过git stash pop stash@{num} ,num就是你要恢复的工作现场的编号ã
 通过git stash clear 命令,清空stash队列

+添加验证bug修复信息内容
\ No newline at end of file
(END)
F:\git_repository\txt>

还可以创建带有说明的标签，用-a指定标签名，-m指定说明文字：
 git tag -a v0.1 -m "version 0.1 released" f76bc98
 F:\git_repository\txt> git tag -a v0.1 -m "version 0.1 released" f76bc98

F:\git_repository\txt>

还可以通过-s用私钥签名一个标签（参考命令，本人未实际操作）：
$ git tag -s v0.2 -m "signed version 0.2 released" fec145a
签名采用PGP签名，因此，必须首先安装gpg（GnuPG），如果没有找到gpg，或者没有gpg密钥对，就会报错：
gpg: signing failed: secret key not available
error: gpg failed to sign the data
error: unable to sign the tag
如果报错，请参考GnuPG帮助文档配置Key

用PGP签名的标签是不可伪造的，因为可以验证PGP签名。
小结
命令git tag <name>用于新建一个标签，默认为HEAD，也可以指定一个commit id；
git tag -a <tagname> -m "blablabla..."可以指定标签信息；
git tag -s <tagname> -m "blablabla..."可以用PGP签名标签；
命令git tag可以查看所有标签。

操作标签
如果标签打错了，也可以删除：
git tag -d v0.1
因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。
如果要推送某个标签到远程，使用命令git push origin <tagname>:
git push origin v1.0
或者，一次性推送全部尚未推送到远程的本地标签：
git push origin --tags
如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：
git tag -d v0.9
然后，从远程删除。删除命令也是push，但是格式如下:
git push origin :refs/tags/v0.9

小结
命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。

自定义GIT
忽略特殊文件
小结
    忽略某些文件时，需要编写.gitignore；
    .gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！
配置别名
有没有经常敲错命令？比如git status？status这个单词真心不好记。
如果敲git st就表示git status那就简单多了，当然这种偷懒的办法我们是极力赞成的。
我们只需要敲一行命令，告诉Git，以后st就表示status：
$ git config --global alias.st status
好了，现在敲git st看看效果
当然还有别的命令可以简写，很多人都用co表示checkout，ci表示commit，br表示branch：
$ git config --global alias.co checkout
$ git config --global alias.ci commit
$ git config --global alias.br branch
配置文件
配置Git的时候，加上--global是针对当前用户起作用的，如果不加，那只针对当前的仓库起作用。
配置文件放哪了？每个仓库的Git配置文件都放在.git/config文件中：
$ cat .git/config 
[core]
    repositoryformatversion = 0
    filemode = true
    bare = false
    logallrefupdates = true
    ignorecase = true
    precomposeunicode = true
[remote "origin"]
    url = git@github.com:michaelliao/learngit.git
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
    remote = origin
    merge = refs/heads/master
[alias]
    last = log -1
别名就在[alias]后面，要删除别名，直接把对应的行删掉即可
而当前用户的Git配置文件放在用户主目录下的一个隐藏文件.gitconfig中：
$ cat .gitconfig
[alias]
    co = checkout
    ci = commit
    br = branch
    st = status
[user]
    name = Your Name
    email = your@email.com
配置别名也可以直接修改这个文件，如果改错了，可以删掉文件重新通过命令配置。
小结
给Git配置好别名，就可以输入命令时偷个懒。我们鼓励偷懒。

搭建Git服务器
搭建Git服务器需要准备一台运行Linux的机器，强烈推荐用Ubuntu或Debian，这样，通过几条简单的apt命令就可以完成安装。
假设你已经有sudo权限的用户账号，下面，正式开始安装。
第一步，安装git
$ sudo apt-get install git
第二步，创建一个git用户，用来运行git服务：
$ sudo adduser git
第三步，创建证书登录：
收集所有需要登录的用户的公钥，就是他们自己的id_rsa.pub文件，把所有公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。
第四步，初始化Git仓库：
先选定一个目录作为Git仓库，假定是/srv/sample.git，在/srv目录下输入命令：
$ sudo git init --bare sample.git
Git就会创建一个裸仓库，裸仓库没有工作区，因为服务器上的Git仓库纯粹是为了共享，所以不让用户直接登录到服务器上去改工作区，并且服务器上的Git仓库通常都以.git结尾。然后，把owner改为git：
$ sudo chown -R git:git sample.git
第五步，禁用shell登录：
出于安全考虑，第二步创建的git用户不允许登录shell，这可以通过编辑/etc/passwd文件完成。找到类似下面的一行：
git:x:1001:1001:,,,:/home/git:/bin/bash
改为：
git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell
这样，git用户可以正常通过ssh使用git，但无法登录shell，因为我们为git用户指定的git-shell每次一登录就自动退出。
第六步，克隆远程仓库：
现在，可以通过git clone命令克隆远程仓库了，在各自的电脑上运行：
$ git clone git@server:/srv/sample.git
Cloning into 'sample'...
warning: You appear to have cloned an empty repository.
剩下的推送就简单了。
管理公钥
如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。
管理权限
有很多不但视源代码如生命，而且视员工为窃贼的公司，会在版本控制系统里设置一套完善的权限控制，每个人是否有读写权限会精确到每个分支甚至每个目录下。因为Git是为Linux源代码托管而开发的，所以Git也继承了开源社区的精神，不支持权限控制。不过，因为Git支持钩子（hook），所以，可以在服务器端编写一系列脚本来控制提交等操作，达到权限控制的目的。Gitolite就是这个工具。
小结
搭建Git服务器非常简单，通常10分钟即可完成；
要方便管理公钥，用Gitosis；
要像SVN那样变态地控制权限，用Gitolite。
